import{O,r as b,D as C}from"./index.js";const{t:a}=O.global,t=new C;function i(e,r="en-US"){const o=r.replace("_","-");return e?{sourceObject:{apiName:e.sourceObjectName,label:e.sourceObjectLabel,prefix:e.sourceObjectPrefix},matchObject:{apiName:e.matchObjectName,label:e.matchObjectLabel,prefix:e.matchObjectPrefix},jobName:e.jobName,jobId:e.jobId,parentId:e.parentJobId,duplicates:e.duplicateCount,generalInfo:D(e),selectedInfo:w(e),resultInfo:g(e),duplicatesInfo:v(e),scenarioData:e.scenarioData,groupFilter:e.groupFilter,jobData:s(e,o),subJobs:N(e.childJobs),runInCloud:e.runInCloud}:{}}function v(e){return!e.initialGroupCount&&!e.initialDuplicateCount&&!e.initialRecordCount&&!e.initialAverageScore?null:[{label:a("job.infoModal.DCJOB_INFOMODAL_DUPLICATESINFO_DUPLICATEGROUPS"),value:e.initialGroupCount},{label:a("job.infoModal.DCJOB_INFOMODAL_DUPLICATESINFO_DUPLICATEPAIRS"),value:e.initialDuplicateCount},{label:a("job.infoModal.DCJOB_INFOMODAL_DUPLICATESINFO_RECORDSINVOLVED"),value:e.initialRecordCount},{label:a("job.infoModal.DCJOB_INFOMODAL_DUPLICATESINFO_AVERAGESCORE"),value:e.initialAverageScore+"%"}]}function D(e){return[{label:a("job.infoModal.DCJOB_INFOMODAL_GENERALINFO_STARTEDBYUSER"),value:e.ownerName},{label:a("job.infoModal.DCJOB_INFOMODAL_GENERALINFO_STATUS"),value:e.statusLabel},{label:a("job.infoModal.DCJOB_INFOMODAL_GENERALINFO_DATETIMESTARTED"),value:e.startDateFormat.replaceAll("/","-")},{label:a("job.infoModal.DCJOB_INFOMODAL_GENERALINFO_DATETIMEFINISHED"),value:e.endDateFormat?e.endDateFormat.replaceAll("/","-"):"N/A"},{label:a("job.infoModal.DCJOB_INFOMODAL_GENERALINFO_TOTALTIMETAKEN"),value:F(e.startDate,e.endDate)},{label:a("job.infoModal.DCJOB_INFOMODAL_GENERALINFO_PROCESSEDBY"),value:e.runInCloud?"Plauti Cloud":e.jobType.endsWith("-ext")?"DC Local":"Salesforce"},{label:a("job.infoModal.DCJOB_INFOMODAL_GENERALINFO_LASTDUPLICATEADDED"),value:e.lastDuplicateAddedFormat.replaceAll("/","-")},{label:a("job.infoModal.DCJOB_INFOMODAL_GENERALINFO_APPLIEDSCENARIOS"),value:e.scenarioData?e.scenarioData.map(r=>r.scenarioName).join(", "):""},{label:a("job.infoModal.DCJOB_INFOMODAL_GENERALINFO_JOBID"),value:e.jobId},{label:a("job.infoModal.DCJOB_INFOMODAL_GENERALINFO_APEXJOBID"),value:e.apexId}]}function u(e){return e?.filters!==void 0&&e?.filterLogic!==void 0}function w(e){let r;if(e.filterOn==="filter"){try{r=JSON.parse(e.sourceFilter)}catch(l){console.error(l),console.error("Unable to parse filter")}u(r)||(r=e.filter)}let o;if(e.filterWith==="filter"){try{o=JSON.parse(e.matchFilter)}catch(l){console.error(l),console.error("Unable to parse filter")}u(o)||(o=e.filterMatch)}return{summary:[{label:a("job.infoModal.DCJOB_INFOMODAL_SELECTEDINFO_OBJECT"),value:e.sourceObjectName===e.matchObjectName?e.sourceObjectLabel:`${e.sourceObjectLabel} to ${e.matchObjectLabel}`},{label:a("job.infoModal.DCJOB_INFOMODAL_SELECTEDINFO_NUMBEROFRECORDS"),value:`${e.isCrossObject?h(e):I(e)}`}],sourceFilterMethod:e.filterOn,sourceFilter:r??e.filterOn,matchFilterMethod:e.filterWith,matchFilter:o??e.filterWith}}function y(e){return e.filterOn==="all"&&e.filterWith==="filter"||e.filterOn==="filter"&&e.filterWith==="all"||e.filterOn==="filter"&&e.filterWith==="filter"}function I(e){const r=e.selectedRecords!=null?e.selectedRecords:"",o=e.matchRecords!=null?e.matchRecords:"",l=e.recordsProcessed!=null?e.recordsProcessed:"";let c=["delta","deltasingle","unique","web2lead"].includes(e.jobType)?l:r;return e.jobName.includes("Scheduled:")?l:y(e)?a("job.infoModal.DCJOB_INFOMODAL_SELECTEDINFO_SOURCE")+": "+r+", "+a("job.infoModal.DCJOB_INFOMODAL_SELECTEDINFO_MATCH")+": "+o:c||0}function h(e){const r=e.selectedRecords!=null?e.selectedRecords:"",o=e.matchRecords!=null?e.matchRecords:"";return e.sourceObjectName+": "+r+", "+e.matchObjectName+": "+o}function g(e){return[{label:a("job.infoModal.DCJOB_INFOMODAL_DUPLICATESINFO_DUPLICATEGROUPS"),value:`${e.groupCount}`},{label:a("job.infoModal.DCJOB_INFOMODAL_DUPLICATESINFO_DUPLICATEPAIRS"),value:`${e.duplicateCount}`},{label:a("job.infoModal.DCJOB_INFOMODAL_DUPLICATESINFO_RECORDSINVOLVED"),value:`${e.recordCount}`},{label:a("job.infoModal.DCJOB_INFOMODAL_DUPLICATESINFO_AVERAGESCORE"),value:`${e.averageScore??0}%`}]}function F(e,r){if(!r)return"N/A";const o=new Date(e),c=new Date(r).getTime()-o.getTime();return c<1e3?`${c}ms`:c<6e4?`${c/1e3}s`:c<36e5?`${(c/6e4).toFixed(0)}m`:`${c%36e5===0?c/36e5:(c/36e5).toFixed(1)}h`}function E(e){const r=["delta","search-ext","unique","deltasingle"],o="setformerge",l="web2lead";return"IMP"===e.sourceObjectPrefix?"API / Apex Insert":r.includes(e.jobType)?"Find Duplicates":o===e.jobType?"Set for Merge":l===e.jobType?"Web to Lead":e.jobTypeLabel}function s(e,r="en-US"){const o=e.endDate?e.endDateFormat.replaceAll("/","-"):"N/A";return{jobName:e.jobName,jobId:e.jobId,type:e.jobType,task:E(e),started:e.startDateFormat.replaceAll("/","-"),finished:o,records:e.recordsProcessed,user:e.ownerName,duplicateGroups:e.groupCount,recordsProcessed:e.recordsProcessed,selectedRecords:e.selectedRecords,matchRecords:e.matchRecords,processedBy:e.jobType.endsWith("-ext")?"DC Local":"Salesforce",progress:e.progress,status:e.statusLabel,statusApiName:e.status,errors:e.errorCount,errorMessage:e.errorMessage,threshold:e.autoProcessThreshold,limit:e.hitLicenseLimit,result:e.result,filter:e.filter,filterOn:e.filterOn,filterMatch:e.filterMatch,filterWith:e.filterWith,groupFilter:e.groupFilter,runInCloud:e.runInCloud}}function N(e){if(!e)return{};const r={};return e.sort((o,l)=>new Date(o.startDate)-new Date(l.startDate)).forEach(o=>{r[o.jobId]=s(o)}),r}const n=b(null),L={async getJobs(e){const r={};let o={};try{o=await t.call("dc3WebJobOverviewController.getJobs",e);const l=await this.getLocale();o?.JobList.forEach(c=>{const d=i(c,l);r[c.jobId]=d})}catch(l){console.error(l)}return{jobList:r,totalJobs:o.totalJobs}},async getJobMeta(){try{return await t.call("dc3WebJobOverviewController.getJobMeta",{})}catch(e){return console.error(e),{}}},async getKoalaLookupResultsForObject(e,r,o){try{const l=o?{...o,objectApiName:e,query:r}:{objectApiName:e,query:r};return await t.call("dc3WebJobOverviewController.getKoalaLookupResultsForObject",l)}catch(l){return console.error(l),{}}},async getKoalaFilterOptionsForObject(e){try{return await t.call("dc3WebJobOverviewController.getKoalaFilterOptionsForObject",{objectPrefix:e})}catch(r){return console.error(r),{}}},async getKoalaFilterOptionsForObjectByName(e){try{return await t.call("dc3WebJobOverviewController.getKoalaFilterOptionsForObjectByName",{objectApiName:e})}catch(r){return console.error(r),{}}},async getConfiguredObjectPicklistValues(){try{return await t.call("dc3WebJobOverviewController.getConfiguredObjectPicklistValues",{})}catch(e){return console.error(e),{}}},async getCrossObjectPicklistValuesForPrefix(e){try{return await t.call("dc3WebJobOverviewController.getCrossObjectPicklistValuesForPrefix",{prefix:e})}catch(r){return console.error(r),{}}},async getScenarioPicklistValuesForPrefix(e){try{return await t.call("dc3WebJobOverviewController.getScenarioPicklistValuesForPrefix",{prefix:e})}catch(r){return console.error(r),{}}},async getComboboxOptions(e,r){try{return await t.call("dc3WebJobOverviewController.getComboboxOptions",{objectApiName:e,fieldApiName:r})}catch(o){return console.error(o),{}}},async getComboboxDefaultValue(e,r){try{return await t.call("dc3WebJobOverviewController.getComboboxDefaultValue",{objectApiName:e,fieldApiName:r})}catch(o){return console.error(o),{}}},async getResultFields(e){try{return await t.call("dc3WebJobOverviewController.getResultFields",{prefix:e})}catch(r){return console.error(r),{}}},async restartJob(e){try{return await t.call("dc3WebJobOverviewController.cloneAndStartJob",{dcJobId:e})}catch(r){return console.error(r),{}}},async startAutoMerge(e){try{return await t.call("dc3WebJobOverviewController.startAutoMerge",e)}catch(r){return console.error(r),{}}},async startAutoConvert(e){try{return await t.call("dc3WebJobOverviewController.startAutoConvert",e)}catch(r){return console.error(r),{}}},async getRecordsToMerge(e){try{return await t.call("dc3WebJobOverviewController.getRecordsToMerge",e)}catch(r){return console.error(r),{}}},async getRecordsToConvert(e){try{return await t.call("dc3WebJobOverviewController.getRecordsToConvert",e)}catch(r){return console.error(r),{}}},async startJob(e){try{return await t.call("dc3WebJobOverviewController.startJob",e)}catch(r){return console.error(r),{error:r}}},async deleteJob(e){try{return await t.call("dc3WebJobOverviewController.deleteJob",{dcJobId:e})}catch(r){throw console.error(r),new Error(r)}},async abortJob(e){try{return await t.call("dc3WebJobOverviewController.abortJob",{dcJobId:e})}catch(r){return console.error(r),{}}},async deleteJobs(e){try{return await t.call("dc3WebJobOverviewController.deleteJobs",e)}catch(r){throw console.error(r),new Error(r)}},async deleteSelectedJobs(e){try{return await t.call("dc3WebJobOverviewController.deleteSelectedJobs",{dcJobIds:e})}catch(r){throw console.error(r),new Error(r)}},async deleteSelectedJobs(e){try{return await t.call("dc3WebJobOverviewController.deleteSelectedJobs",{dcJobIds:e})}catch(r){return console.error(r),{}}},async getRecordsForDelete(e){try{return await t.call("dc3WebJobOverviewController.getRecordsForDelete",e)}catch(r){return console.error(r),{}}},async createExportJob(e,r=!1){try{return await t.call("dc3WebJobOverviewController.createExportJob",{dcJobId:e,runInCloud:r})}catch(o){return console.error(o),{}}},async getUsersByQuery(e){try{return await t.call("dc3WebJobOverviewController.getUsersByQuery",{query:e})}catch(r){return console.error(r),{}}},async getUserById(e){try{return await t.call("dc3WebJobOverviewController.getUserById",e)}catch(r){return console.error(r),{}}},async getGroupsByQuery(e){try{return await t.call("dc3WebJobOverviewController.getGroupsByQuery",e)}catch(r){return console.error(r),{}}},async getCurrentUser(){try{return await t.call("dc3WebJobOverviewController.getCurrentUser",{})}catch(e){return console.error(e),{}}},async getCurrentUserId(){try{return await t.call("dc3WebJobOverviewController.getCurrentUserId",{})}catch(e){return console.error(e),{}}},async getRecordCount(e){try{const r=await t.call("dc3WebJobOverviewController.getRecordCount",e);if(r===void 0)throw new Error(`Invalid field ${e}`);return r}catch(r){throw new Error(r)}},async sendEmail(e){try{return await t.call("dc3WebJobOverviewController.sendEmail",e)}catch(r){return console.error(r),{}}},async createTask(e){try{return await t.call("dc3WebJobOverviewController.createTask",e)}catch(r){return console.error(r),{}}},async getPredefinedFilters(e){try{return await t.call("dc3WebJobOverviewController.getPredefinedFilters",{prefix:e})}catch(r){return console.error(r),{}}},async getLocale(){if(n.value===null)try{const e=await t.call("dc3WebJobOverviewController.getLocale",{});if(typeof e=="string"&&!/\w\w[-_]\w\w/.test(e))throw new Error("Response was invalid locale format!");n.value=e}catch(e){console.error(e),n.value="en-US"}return n.value},async generateShareLink(e,r){try{return await t.call("dc3WebJobOverviewController.generateShareLink",{dcJobId:e,isCrossObject:r})}catch(o){return console.error(o),{}}},async getCampaigns(){try{return await t.call("dc3WebJobOverviewController.getCampaigns",{})}catch(e){return console.error(e),{}}},async getConvertStatusOptions(){try{return await t.call("dc3WebJobOverviewController.getConvertStatusOptions",{})}catch(e){return console.error(e),{}}},async parseFilterModel(e){try{return await t.call("dc3WebJobOverviewController.parseFilterModel",{...e})}catch(r){return console.error(r),{}}},async getMaxScoreForJob(e){try{return await t.call("dc3WebJobOverviewController.getMaxScoreForJob",{jobId:e})}catch(r){return console.error(r),{}}},async startInitialOnboardingJob(){try{await t.call("dc3WebOnboardingController.startInitialOnboardingJob",{})}catch(e){console.error(e)}},async getInitialOnboardingJob(){try{const e=await t.call("dc3WebOnboardingController.getInitialOnboardingJob",{});return i(e)}catch(e){return console.error(e),{}}}};export{L as d};
